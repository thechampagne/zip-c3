/*
 * Copyright (c) 2023 XXIV
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
module zip;

/*
 * Default zip compression level.
 */
const int DEFAULT_COMPRESSION_LEVEL = 6;

/*
 * Error codes
 */
const int ENOINIT = -1;      // not initialized
const int EINVENTNAME = -2;  // invalid entry name
const int ENOENT = -3;       // entry not found
const int EINVMODE = -4;     // invalid zip mode
const int EINVLVL = -5;      // invalid compression level
const int ENOSUP64 = -6;     // no zip 64 support
const int EMEMSET = -7;      // memset error
const int EWRTENT = -8;      // cannot write data to entry
const int ETDEFLINIT = -9;   // cannot initialize tdefl compressor
const int EINVIDX = -10;     // invalid index
const int ENOHDR = -11;      // header not found
const int ETDEFLBUF = -12;   // cannot flush tdefl buffer
const int ECRTHDR = -13;     // cannot create entry header
const int EWRTHDR = -14;     // cannot write entry header
const int EWRTDIR = -15;     // cannot write to central dir
const int EOPNFILE = -16;    // cannot open file
const int EINVENTTYPE = -17; // invalid entry type
const int EMEMNOALLOC = -18; // extracting data using no memory allocation
const int ENOFILE = -19;     // file not found
const int ENOPERM = -20;     // no permission
const int EOOMEM = -21;      // out of memory
const int EINVZIPNAME = -22; // invalid zip archive name
const int EMKDIR = -23;      // make dir error
const int ESYMLINK = -24;    // symlink error
const int ECLSZIP = -25;     // close archive error
const int ECAPSIZE = -26;    // capacity size too small
const int EFSEEK = -27;      // fseek error
const int EFREAD = -28;      // fread error
const int EFWRITE = -29;     // fwrite error
const int ERINIT = -30;      // cannot initialize reader
const int EWINIT = -31;      // cannot initialize writer
const int EWRINIT = -32;     // cannot initialize writer from reader

/*
 * Looks up the error message string corresponding to an error number.
 * @param errnum error number
 * @return error message string corresponding to errnum or NULL if error is not
 * found.
 */
fn char* strerror(int errnum) @extern("zip_strerror");

/*
 * @struct Zip
 *
 * This data structure is used throughout the library to represent zip archive.
 */
 struct Zip {
     void* zip;
 }

 def OnEntryExtractCallback = fn usz(void *arg, ulong offset, void *data, usz size);

 def OnStreamExtractCallback = fn int(char *filename, void *arg);

 def OnExtractCallback = fn int(char *filename, void *arg);

/*
 * Opens zip archive with compression level using the given mode.
 *
 * @param zipname zip archive file name.
 * @param level compression level (0-9 are the standard zlib-style levels).
 * @param mode file access mode.
 *        - 'r': opens a file for reading/extracting (the file must exists).
 *        - 'w': creates an empty file for writing.
 *        - 'a': appends to an existing archive.
 *
 * @return the zip archive handler or NULL on error
 */
fn Zip open(char *zipname, int level, char mode) @extern("zip_open");

/*
 * Opens zip archive with compression level using the given mode.
 * The function additionally returns @param errnum -
 *
 * @param zipname zip archive file name.
 * @param level compression level (0-9 are the standard zlib-style levels).
 * @param mode file access mode.
 *        - 'r': opens a file for reading/extracting (the file must exists).
 *        - 'w': creates an empty file for writing.
 *        - 'a': appends to an existing archive.
 * @param errnum 0 on success, negative number (< 0) on error.
 *
 * @return the zip archive handler or NULL on error
 */
fn Zip openWithError(char *zipname, int level, char mode, int *errnum) @extern("zip_openwitherror");

/*
 * Closes the zip archive, releases resources - always finalize.
 *
 * @param zip zip archive handler.
 */
fn void Zip.close(Zip zip) @extern("zip_close");

/*
 * Determines if the archive has a zip64 end of central directory headers.
 *
 * @param zip zip archive handler.
 *
 * @return the return code - 1 (true), 0 (false), negative number (< 0) on
 *         error.
 */
fn int Zip.is64(Zip zip) @extern("zip_is64");

/*
 * Opens an entry by name in the zip archive.
 *
 * For zip archive opened in 'w' or 'a' mode the function will append
 * a new entry. In readonly mode the function tries to locate the entry
 * in global dictionary.
 *
 * @param zip zip archive handler.
 * @param entryname an entry name in local dictionary.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryOpen(Zip zip, char *entryname) @extern("zip_entry_open");

/*
 * Opens an entry by name in the zip archive.
 *
 * For zip archive opened in 'w' or 'a' mode the function will append
 * a new entry. In readonly mode the function tries to locate the entry
 * in global dictionary (case sensitive).
 *
 * @param zip zip archive handler.
 * @param entryname an entry name in local dictionary (case sensitive).
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryOpenCaseSensitive(Zip zip, char *entryname) @extern("zip_entry_opencasesensitive");

/*
 * Opens a new entry by index in the zip archive.
 *
 * This function is only valid if zip archive was opened in 'r' (readonly) mode.
 *
 * @param zip zip archive handler.
 * @param index index in local dictionary.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryOpenByIndex(Zip zip, usz index) @extern("zip_entry_openbyindex");

/*
 * Closes a zip entry, flushes buffer and releases resources.
 *
 * @param zip zip archive handler.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryClose(Zip zip) @extern("zip_entry_close");

/*
 * Returns a local name of the current zip entry.
 *
 * The main difference between user's entry name and local entry name
 * is optional relative path.
 * Following .ZIP File Format Specification - the path stored MUST not contain
 * a drive or device letter, or a leading slash.
 * All slashes MUST be forward slashes '/' as opposed to backwards slashes '\'
 * for compatibility with Amiga and UNIX file systems etc.
 *
 * @param zip: zip archive handler.
 *
 * @return the pointer to the current zip entry name, or NULL on error.
 */
fn char* Zip.entryName(Zip zip) @extern("zip_entry_name");

/*
 * Returns an index of the current zip entry.
 *
 * @param zip zip archive handler.
 *
 * @return the index on success, negative number (< 0) on error.
 */
fn long Zip.entryIndex(Zip zip) @extern("zip_entry_index");

/*
 * Determines if the current zip entry is a directory entry.
 *
 * @param zip zip archive handler.
 *
 * @return the return code - 1 (true), 0 (false), negative number (< 0) on
 *         error.
 */
fn int Zip.entryIsdir(Zip zip) @extern("zip_entry_isdir");

/*
 * Returns the uncompressed size of the current zip entry.
 * Alias for zip_entry_uncomp_size (for backward compatibility).
 *
 * @param zip zip archive handler.
 *
 * @return the uncompressed size in bytes.
 */
fn ulong Zip.entrySize(Zip zip) @extern("zip_entry_size");

/*
 * Returns the uncompressed size of the current zip entry.
 *
 * @param zip zip archive handler.
 *
 * @return the uncompressed size in bytes.
 */
fn ulong Zip.entryUncompSize(Zip zip) @extern("zip_entry_uncomp_size");

/*
 * Returns the compressed size of the current zip entry.
 *
 * @param zip zip archive handler.
 *
 * @return the compressed size in bytes.
 */
fn ulong Zip.entryCompSize(Zip zip) @extern("zip_entry_comp_size");

/*
 * Returns CRC-32 checksum of the current zip entry.
 *
 * @param zip zip archive handler.
 *
 * @return the CRC-32 checksum.
 */
fn uint Zip.entryCrc32(Zip zip) @extern("zip_entry_crc32");

/*
 * Compresses an input buffer for the current zip entry.
 *
 * @param zip zip archive handler.
 * @param buf input buffer.
 * @param bufsize input buffer size (in bytes).
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryWrite(Zip zip, void *buf, usz bufsize) @extern("zip_entry_write");

/*
 * Compresses a file for the current zip entry.
 *
 * @param zip zip archive handler.
 * @param filename input file.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryFwrite(Zip zip, char *filename) @extern("zip_entry_fwrite");

/*
 * Extracts the current zip entry into output buffer.
 *
 * The function allocates sufficient memory for a output buffer.
 *
 * @param zip zip archive handler.
 * @param buf output buffer.
 * @param bufsize output buffer size (in bytes).
 *
 * @note remember to release memory allocated for a output buffer.
 *       for large entries, please take a look at zip_entry_extract function.
 *
 * @return the return code - the number of bytes actually read on success.
 *         Otherwise a negative number (< 0) on error.
 */
fn long Zip.entryRead(Zip zip, void **buf, usz *bufsize) @extern("zip_entry_read");

/*
 * Extracts the current zip entry into a memory buffer using no memory
 * allocation.
 *
 * @param zip zip archive handler.
 * @param buf preallocated output buffer.
 * @param bufsize output buffer size (in bytes).
 *
 * @note ensure supplied output buffer is large enough.
 *       zip_entry_size function (returns uncompressed size for the current
 *       entry) can be handy to estimate how big buffer is needed.
 *       For large entries, please take a look at zip_entry_extract function.
 *
 * @return the return code - the number of bytes actually read on success.
 *         Otherwise a negative number (< 0) on error (e.g. bufsize is not large
 * enough).
 */
fn long Zip.entryNoAllocRead(Zip zip, void *buf, usz bufsize) @extern("zip_entry_noallocread");

/*
 * Extracts the current zip entry into output file.
 *
 * @param zip zip archive handler.
 * @param filename output file.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryFread(Zip zip, char *filename) @extern("zip_entry_fread");

/*
 * Extracts the current zip entry using a callback function (on_extract).
 *
 * @param zip zip archive handler.
 * @param on_extract callback function.
 * @param arg opaque pointer (optional argument, which you can pass to the
 *        on_extract callback)
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int Zip.entryExtract(Zip zip, OnEntryExtractCallback on_extract, void *arg) @extern("zip_entry_extract");

/*
 * Returns the number of all entries (files and directories) in the zip archive.
 *
 * @param zip zip archive handler.
 *
 * @return the return code - the number of entries on success, negative number
 *         (< 0) on error.
 */
fn long Zip.entriesTotal(Zip zip) @extern("zip_entries_total");

/*
 * Deletes zip archive entries.
 *
 * @param zip zip archive handler.
 * @param entries array of zip archive entries to be deleted.
 * @param len the number of entries to be deleted.
 * @return the number of deleted entries, or negative number (< 0) on error.
 */
fn long Zip.entriesDelete(Zip zip, char** entries, usz len) @extern("zip_entries_delete");

/*
 * Extracts a zip archive stream into directory.
 *
 * If on_extract is not NULL, the callback will be called after
 * successfully extracted each zip entry.
 * Returning a negative value from the callback will cause abort and return an
 * error. The last argument (void *arg) is optional, which you can use to pass
 * data to the on_extract callback.
 *
 * @param stream zip archive stream.
 * @param size stream size.
 * @param dir output directory.
 * @param on_extract on extract callback.
 * @param arg opaque pointer.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int streamExtract(char *stream, usz size, char *dir, OnStreamExtractCallback on_extract, void *arg) @extern("zip_stream_extract");

/*
 * Opens zip archive stream into memory.
 *
 * @param stream zip archive stream.
 * @param size stream size.
 * @param level compression level (0-9 are the standard zlib-style levels).
 * @param mode file access mode.
 *        - 'r': opens a file for reading/extracting (the file must exists).
 *        - 'w': creates an empty file for writing.
 *        - 'a': appends to an existing archive.
 *
 * @return the zip archive handler or NULL on error
 */
fn Zip streamOpen(char *stream, usz size, int level, char mode) @extern("zip_stream_open");

/*
 * Opens zip archive stream into memory.
 * The function additionally returns @param errnum -
 *
 * @param stream zip archive stream.
 * @param size stream size.*
 * @param level compression level (0-9 are the standard zlib-style levels).
 * @param mode file access mode.
 *        - 'r': opens a file for reading/extracting (the file must exists).
 *        - 'w': creates an empty file for writing.
 *        - 'a': appends to an existing archive.
 * @param errnum 0 on success, negative number (< 0) on error.
 *
 * @return the zip archive handler or NULL on error
 */
fn Zip streamOpenWithError(char *stream, usz size, int level, char mode, int *errnum) @extern("zip_stream_openwitherror");

/*
 * Copy zip archive stream output buffer.
 *
 * @param zip zip archive handler.
 * @param buf output buffer. User should free buf.
 * @param bufsize output buffer size (in bytes).
 *
 * @return copy size
 */
fn long Zip.streamCopy(Zip zip, void **buf, usz *bufsize) @extern("zip_stream_copy");

/*
 * Close zip archive releases resources.
 *
 * @param zip zip archive handler.
 *
 * @return
 */
fn void Zip.streamClose(Zip zip) @extern("zip_stream_close");

/*
 * Creates a new archive and puts files into a single zip archive.
 *
 * @param zipname zip archive file.
 * @param filenames input files.
 * @param len: number of input files.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int create(char *zipname, char** filenames, usz len) @extern("zip_create");

/*
 * Extracts a zip archive file into directory.
 *
 * If on_extract_entry is not NULL, the callback will be called after
 * successfully extracted each zip entry.
 * Returning a negative value from the callback will cause abort and return an
 * error. The last argument (void *arg) is optional, which you can use to pass
 * data to the on_extract_entry callback.
 *
 * @param zipname zip archive file.
 * @param dir output directory.
 * @param on_extract_entry on extract callback.
 * @param arg opaque pointer.
 *
 * @return the return code - 0 on success, negative number (< 0) on error.
 */
fn int extract(char *zipname, char *dir, OnExtractCallback on_extract_entry, void *arg) @extern("zip_extract");
